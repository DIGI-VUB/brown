// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cluster_brown
Rcpp::List cluster_brown(std::string text_file, std::string output_dir, int min_occur, int initC, int ncollocs, int plen, int num_threads, bool chk, bool print_stats, bool paths2map);
RcppExport SEXP _brown_cluster_brown(SEXP text_fileSEXP, SEXP output_dirSEXP, SEXP min_occurSEXP, SEXP initCSEXP, SEXP ncollocsSEXP, SEXP plenSEXP, SEXP num_threadsSEXP, SEXP chkSEXP, SEXP print_statsSEXP, SEXP paths2mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type text_file(text_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_dir(output_dirSEXP);
    Rcpp::traits::input_parameter< int >::type min_occur(min_occurSEXP);
    Rcpp::traits::input_parameter< int >::type initC(initCSEXP);
    Rcpp::traits::input_parameter< int >::type ncollocs(ncollocsSEXP);
    Rcpp::traits::input_parameter< int >::type plen(plenSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type chk(chkSEXP);
    Rcpp::traits::input_parameter< bool >::type print_stats(print_statsSEXP);
    Rcpp::traits::input_parameter< bool >::type paths2map(paths2mapSEXP);
    rcpp_result_gen = Rcpp::wrap(cluster_brown(text_file, output_dir, min_occur, initC, ncollocs, plen, num_threads, chk, print_stats, paths2map));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_brown_cluster_brown", (DL_FUNC) &_brown_cluster_brown, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_brown(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
